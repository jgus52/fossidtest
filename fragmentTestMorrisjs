
  constructor(
    private route: ActivatedRoute,
    private router: Router,
    @Inject(ALAIN_I18N_TOKEN) private i18n: I18NService
  ) {
    router.events
      .pipe(takeUntil(this.onDestroy$))
      .pipe(filter((event) => event instanceof NavigationEnd))
      .subscribe((event: NavigationEnd) => {
        this.setActive();
      });
  }

  Morris = window.Morris = {};

  $ = jQuery;

  Morris.EventEmitter = (function() {
    function EventEmitter() {}

    EventEmitter.prototype.on = function(name, handler) {
      if (this.handlers == null) {
        this.handlers = {};
      }
      if (this.handlers[name] == null) {
        this.handlers[name] = [];
      }
      this.handlers[name].push(handler);
      return this;
    };

    EventEmitter.prototype.fire = function() {
      var args, handler, name, _i, _len, _ref, _results;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if ((this.handlers != null) && (this.handlers[name] != null)) {
        _ref = this.handlers[name];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          handler = _ref[_i];
          _results.push(handler.apply(null, args));
        }
        return _results;
      }
    };

    return EventEmitter;

  })();

   changeTab(item: any) {
       this.selectedTabPosition = this.tabs.findIndex((w) => w.key.startsWith(item.key));
       this.router.navigate(['/my-page', 'setting', item.key]);
     }

     private setActive() {
       const key = this.route.snapshot.children[0].url[0].path;
       let idx = this.tabs.findIndex((w) => w.key.startsWith(key));
       if (idx === -1) {
         idx = this.tabs.findIndex((w) => {
           if (!!w.relatives) {
             return w.relatives.includes(key);
           }
         });
       }
       this.selectedTabPosition = idx;
     }
